# Global settings for the application
global:
  externalIP: "0.0.0.0" # Example: "192.168.1.1"
  namespace: "default" # Example: "hoppscotch"

# Community-specific settings
community:
  replicas: 1 # Example: 3
  image:
    repository: hoppscotch/hoppscotch
    tag: latest # Example: "v1.0.0"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  migration:
    upgradeEnabled: false # If true, the migration job will run on every helm upgrade

  config:
    database:
      external: false # Flag to use external DB, if false, it will use the internal postgresql created by the helm chart
      url: "postgres://user:password@hostname:port/database?sslmode=require"
    postgresql:
      image: postgres:15
      persistence:
        size: 8Gi
        storageClass: ""
      database: hoppscotchCommunity
      username: hoppscotch
      password: hoppscotch123

    mailer:
      enable: false
      useCustomConfigs: false
      addressFrom: '"Dummy Name" <dummy@example.com>'
      smtp:
        url: "smtps://user:pass@smtp.example.com"
        host: "smtp.example.com"
        port: "587"
        secure: false
        user: "user"
        password: "password"
        tlsRejectUnauthorized: false

    rateLimit:
      ttl: 60
      max: 100

    affinityEnabled: false
    nodeHostnames: "node-1,node-2" # Example: "node-3,node-4"

    authjwt:
      sessionSecret: "dummySessionSecret"
      jwtSecret: "dummyJwtSecret"
      tokenSaltComplexity: 10
      magicLinkTokenValidity: 3
      refreshTokenValidity: "1d"
      accessTokenValidity: "1d"
      dataEncryptionKey: "data encryption key with 32 char"

    urls:
      base: "http://frontend.example.com"
      shortcode: "http://frontend.example.com"
      admin: "http://admin.example.com"
      backend:
        gql: "http://backend.example.com/graphql"
        ws: "ws://backend.example.com/graphql"
        api: "http://backend.example.com/v1"
      redirect: "http://frontend.example.com"
      whitelistedOrigins: "http://backend.example.com,http://frontend.example.com,http://admin.example.com"

    auth:
      allowedProviders: "EMAIL" # "GOOGLE,MICROSOFT,GITHUB,EMAIL"

      existingSecret: ""
      google:
        clientId:  "" # "dummyGoogleClientId"
        clientSecret:  "" # "dummyGoogleClientSecret"
        callbackUrl:  "" # "http://backend.example.com/v1/auth/google/callback"
        scope:  "" # "email,profile"

      github:
        clientId:  "" # "dummyGithubClientId"
        clientSecret:  "" # "dummyGithubClientSecret"
        callbackUrl:  "" # "http://backend.example.com/v1/auth/github/callback"
        scope:  "" # "user:email"

      microsoft:
        clientId:  "" # "dummyMicrosoftClientId"
        clientSecret:  "" # "dummyMicrosoftClientSecret"
        callbackUrl:  "" # "http://backend.example.com/v1/auth/microsoft/callback"
        scope:  "" # "user.read"
        tenant:  "" # "dummyTenantId"

    community:
      enableSubpathBasedAccess: false

    links:
      tos: "https://docs.example.com/terms"
      privacyPolicy: "https://docs.example.com/privacy"

# ServiceAccount configuration
serviceAccount:
  # Name of the ServiceAccount; if not set, defaults to "{{ .Release.Name }}-sa"
  name: ""
  # Annotations for the ServiceAccount (e.g., for AWS IRSA)
  annotations: {}
  # Example for AWS IRSA:
  # eks.amazonaws.com/role-arn: "arn:aws:iam::${aws_account_id}:role/devops-${stage}-hoppscotch"

# Service configuration
service:
  apiVersion: v1
  name: hoppscotch-community
  app: hoppscotch-community
  # Dynamically set based on ingress
  type: "{{ .Values.service.ingress.enabled | ternary \"ClusterIP\" \"LoadBalancer\" }}"
  # Only set externalTrafficPolicy for LoadBalancer
  externalTrafficPolicy: "{{ .Values.service.ingress.enabled | ternary \"\" \"Cluster\" }}"

  ports:
    backend:
      port: 3170
      targetPort: 3170
      protocol: TCP
      name: backend
    frontend:
      port: 3000
      targetPort: 3000
      protocol: TCP
      name: frontend
    admin:
      port: 3100
      targetPort: 3100
      protocol: TCP
      name: admin
    subpath:
      port: 80
      targetPort: 80
      protocol: TCP
      name: subpath
  selector:
    app: hoppscotch-community

  # Ingress Configuration
  ingress:
    enabled: true
    mainHost: frontend.example.com
    adminHost: admin.example.com
    backendHost: backend.example.com
    className: nginx # nginx, alb, traefik

  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    service.kubernetes.io/load-balancer-type: "External"
    # Example AWS ALB internal configuration
    # alb.ingress.kubernetes.io/scheme: "internal"
    # alb.ingress.kubernetes.io/security-groups: "sg-12345678"
    # alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:region:account-id:certificate/cert-id"

  # TLS Configuration
  tls:
    enabled: false
    secretName: hoppscotch-tls